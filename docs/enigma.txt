Help on module enigma:

NAME
    enigma

CLASSES
    builtins.object
        Enigma

    class Enigma(builtins.object)
     |  Enigma(rotor_a: list, rotor_b: list, rotor_c: list, plugs=None)
     |
     |  Класс эмуляции шифровальной машины Энигма
     |
     |  Args:
     |      rotor_a (list): Конфигурация для ротора A.
     |      rotor_b (list): Конфигурация для ротора B.
     |      rotor_c (list): Конфигурация для ротора C.
     |      plugs (list, optional): Конфигурация переставления букв.
     |
     |  Attributes:
     |      ra_pos (int): Позиция ротора A.
     |      rb_pos (int): Позиция ротора B.
     |      rc_pos (int): Позиция ротора C.
     |
     |  Methods:
     |      state(): Отображает текущее состояние Энигмы.
     |      increment_rotors(): Увеличение заначения позиции роторов.
     |      get_rotors_pos(): Получение позиций роторов.
     |      change_rotors_pos(ra: int, rb: int, rc: int): Изменить позиции роторов.
     |      get_rotor_letter(rotor: list, r_pos: int): Получить букву на роторе при определенной позиции.
     |      get_rotors_connection(input_char: str, reverse: bool): Получить букву после прохождения через блок роторов.
     |      convert(input_string: str, reverse: bool): Зашифровать или дешифровать сообщение
     |
     |  Methods defined here:
     |
     |  __init__(self, rotor_a: list, rotor_b: list, rotor_c: list, plugs=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  change_rotors_pos(self, ra: int, rb: int, rc: int)
     |      Изменить позиции роторов
     |
     |      Args:
     |          ra (int): Новая позиция ротора A.
     |          rb (int): Новая позиция ротора B.
     |          rc (int): Новая позиция ротора C.
     |
     |      Prints:
     |          str: Информация о новых позициях роторов
     |
     |  convert(self, input_string: str, reverse=False) -> str
     |      Зашифровать или дешифровать строку с помощью Энигмы
     |
     |      Args:
     |          input_string (str): Входящая строка
     |          reverse (bool, optional): Если True - идет расшифровка
     |
     |      Returns:
     |          str: Преобразованная строка
     |
     |  get_rotors_connection(self, input_char: str, reverse=False) -> dict
     |      Получить букву после прохождения через блок роторов.
     |
     |
     |      Args:
     |          input_char (str): Буква, которая будет пропущена через роторы.
     |          reverse (bool, optional): Если True - будет произведено дешифрование
     |
     |      Returns:
     |          dict: Словарь содержащий букву и ее индекс на последнем роторе
     |
     |  get_rotors_pos(self) -> list
     |      Получение позиций роторов.
     |
     |      Returns:
     |          list: список содержащий текущие позиции роторов
     |
     |  increment_rotors(self)
     |      Увеличение заначения позиции роторов.
     |
     |  state(self)
     |      Отображает текущее состояние Энигмы.
     |
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |
     |  get_rotor_letter(rotor: list, r_pos: int)
     |      Получить букву на роторе при определенной позиции.
     |
     |      Args:
     |          rotor (list): Конфигурация ротора
     |          r_pos (int): Номер позиции
     |
     |      Returns:
     |          str: Буква стоящая на позици r_pos в роторе rotor
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |
     |  ra_pos = 1
     |
     |  rb_pos = 1
     |
     |  rc_pos = 1

FILE
source/enigma.py